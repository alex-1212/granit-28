
import React, { createContext, useState, useEffect, useContext, ReactNode } from 'react';
import { Language, translations, TranslationPath, PathValue } from '@/translations';

type LanguageContextType = {
  language: Language;
  setLanguage: (lang: Language) => void;
  t: <P extends TranslationPath>(path: P) => PathValue<typeof translations['ru'], P>;
  availableLanguages: { code: Language; name: string; flag: string }[];
};

const defaultLanguage: Language = 'ru';

export const availableLanguages = [
  { code: 'ru' as const, name: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },
  { code: 'en' as const, name: 'English', flag: 'üá¨üáß' },
  { code: 'zh' as const, name: '–ö–∏—Ç–∞–π—Å–∫–∏–π', flag: 'üá®üá≥' },
];

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export const LanguageProvider = ({ children }: { children: ReactNode }) => {
  const [language, setLanguageState] = useState<Language>(defaultLanguage);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —è–∑—ã–∫–∞ –∏–∑ localStorage –∏–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
  useEffect(() => {
    const storedLanguage = localStorage.getItem('language') as Language;
    if (storedLanguage && Object.keys(translations).includes(storedLanguage)) {
      setLanguageState(storedLanguage);
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —è–∑—ã–∫ –±—Ä–∞—É–∑–µ—Ä–∞
      const browserLang = navigator.language.split('-')[0];
      if (browserLang === 'en' || browserLang === 'zh') {
        setLanguageState(browserLang as Language);
      }
    }
  }, []);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∑—ã–∫–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ localStorage
  const setLanguage = (lang: Language) => {
    setLanguageState(lang);
    localStorage.setItem('language', lang);
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ –∫–ª—é—á—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π
  const t = <P extends TranslationPath>(path: P): PathValue<typeof translations['ru'], P> => {
    const keys = path.split('.');
    let current: any = translations[language];
    
    for (const key of keys) {
      if (current === undefined || current[key] === undefined) {
        console.warn(`Translation key "${path}" missing for language "${language}"`);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞, –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        let fallback: any = translations['ru'];
        for (const fbKey of keys) {
          if (fallback === undefined || fallback[fbKey] === undefined) {
            return path as any; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º –∫–ª—é—á, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–∂–µ —Ä—É—Å—Å–∫–æ–π –≤–µ—Ä—Å–∏–∏
          }
          fallback = fallback[fbKey];
        }
        return fallback as any;
      }
      current = current[key];
    }
    
    return current as any;
  };
  
  return (
    <LanguageContext.Provider value={{ 
      language, 
      setLanguage, 
      t,
      availableLanguages
    }}>
      {children}
    </LanguageContext.Provider>
  );
};

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —è–∑—ã–∫–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};
