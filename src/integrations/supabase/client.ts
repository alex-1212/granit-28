
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://axpllivhrhdrnaomusfl.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF4cGxsaXZocmhkcm5hb211c2ZsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI4MDE3OTEsImV4cCI6MjA1ODM3Nzc5MX0.6gXSOABsnN4RxZ5yzwbiHYHdVSOXRg4RBpEftNnvLnU";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      storageKey: 'supabase-auth-token',
    },
    global: {
      headers: {
        'Content-Type': 'application/json',
      },
    },
  }
);

// Export a helper function to check if a user is authenticated
export const isUserAuthenticated = async () => {
  // Сначала проверяем ручную авторизацию
  if (localStorage.getItem('manual_auth') === 'true') {
    return true;
  }

  // Затем проверяем Supabase сессию
  const { data, error } = await supabase.auth.getSession();
  console.log("Auth check session:", data, error);
  return !!data.session;
};

// Retrieve authenticated user
export const getAuthenticatedUser = async () => {
  // Проверяем ручную авторизацию
  if (localStorage.getItem('manual_auth') === 'true') {
    const userStr = localStorage.getItem('manual_auth_user');
    if (userStr) {
      try {
        return JSON.parse(userStr);
      } catch (e) {
        console.error('Error parsing manual auth user:', e);
      }
    }
    return { id: '1', email: 'adminnews@granit.com' };
  }

  // Получаем пользователя из Supabase
  const { data } = await supabase.auth.getUser();
  return data.user;
};

// Set up automatic authentication for manual auth users
export const setupManualAuth = async () => {
  if (localStorage.getItem('manual_auth') === 'true') {
    try {
      // This creates a custom session for the manually authenticated user
      const { error } = await supabase.auth.signInWithPassword({
        email: 'adminnews@granit.com',
        password: SUPABASE_PUBLISHABLE_KEY // Using the publishable key as a password for simplicity
      });
      
      if (error) {
        console.error('Error setting up manual auth:', error);
        // If signIn fails, we'll try to use the token directly
        await supabase.auth.setSession({
          access_token: SUPABASE_PUBLISHABLE_KEY,
          refresh_token: SUPABASE_PUBLISHABLE_KEY
        });
      }
    } catch (e) {
      console.error('Exception during manual auth setup:', e);
    }
  }
};

// Initialize manual auth if needed
if (typeof localStorage !== 'undefined' && localStorage.getItem('manual_auth') === 'true') {
  setupManualAuth().catch(console.error);
}
